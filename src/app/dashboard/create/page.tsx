"use client";

import React, { useState } from "react";
import { useAuth } from "@clerk/nextjs";
import { redirect } from "next/navigation";
import { Container } from "@/components/ui/container";
import { Button } from "@/components/ui/button";
import { CardGlass, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Loader } from "@/components/ui/loader";
import { Sparkles, Wand2 } from "lucide-react";

export default function CreateProjectPage() {
  const { isLoaded, userId } = useAuth();
  const [loading, setLoading] = useState(false);
  const [projectName, setProjectName] = useState("");
  const [projectType, setProjectType] = useState("personal");
  const [description, setDescription] = useState("");
  const [generatedContent, setGeneratedContent] = useState("");
  const [error, setError] = useState("");
  
  // Show loading state while Clerk loads
  if (!isLoaded) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-black">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-amber-200"></div>
      </div>
    );
  }
  
  // Redirect if not signed in
  if (!userId) {
    redirect("/");
  }

  const handleGenerate = async () => {
    if (!projectName || !description) {
      setError("Please fill in all required fields");
      return;
    }
    
    setLoading(true);
    setError("");
    
    try {
      const prompt = `Create a compelling brand story for a ${projectType} project named "${projectName}". 
      Here's some context about the project: ${description}. 
      The story should be authentic, emotionally resonant, and highlight the unique value proposition.`;
      
      // Call the API route for generation
      const response = await fetch('/api/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          prompt,
          context: `Project type: ${projectType}, Project name: ${projectName}`
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to generate content');
      }
      
      const data = await response.json();
      setGeneratedContent(data.text);
      
    } catch (err) {
      console.error("Error generating content:", err);
      setError("Failed to generate content. Please try again.");
      
      // Fallback to simulated content for demo purposes
      setGeneratedContent(`This is a simulated response for your brand story about "${projectName}".
      
In a real implementation, this would be generated by Llama 4 via the Groq API.

To make this work:
1. Add your GROQ_API_KEY to the environment variables
2. Create a server action to call the Llama 4 API
3. Replace this placeholder with the actual API call

The story would be crafted based on your project type (${projectType}) and the description you provided.`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <main className="flex-1 overflow-auto bg-gradient-to-b from-black via-gray-900 to-black min-h-screen pt-8 pb-16">
      <Container>
        <div className="max-w-3xl mx-auto">
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold mb-3 bg-clip-text text-transparent bg-gradient-to-r from-amber-200 via-yellow-300 to-amber-200">
              Create Your Brand Story
            </h1>
            <p className="text-gray-400">
              Craft a compelling narrative that resonates with your audience
            </p>
          </div>
          
          <div className="relative mb-8">
            <div className="absolute -inset-1 bg-gradient-to-r from-amber-200/5 via-yellow-300/5 to-amber-200/5 blur-lg rounded-3xl"></div>
            <CardGlass className="border border-amber-200/20 backdrop-blur-md rounded-3xl overflow-hidden">
              <CardHeader>
                <CardTitle className="text-2xl text-amber-100">Project Details</CardTitle>
                <CardDescription className="text-gray-400">Tell us about your brand story project</CardDescription>
              </CardHeader>
              <CardContent className="space-y-5">
                <div className="space-y-2">
                  <Label htmlFor="project-name" className="text-amber-100 text-base">Project Name</Label>
                  <Input 
                    id="project-name" 
                    placeholder="My LinkedIn Bio" 
                    value={projectName}
                    onChange={(e) => setProjectName(e.target.value)}
                    className="bg-black/40 border-amber-200/20 focus:border-amber-200/50 h-12 text-white placeholder:text-gray-500"
                  />
                </div>
                
                <div className="space-y-2">
                  <Label className="text-amber-100 text-base">Project Type</Label>
                  <div className="grid grid-cols-2 gap-4">
                    <Button
                      type="button"
                      onClick={() => setProjectType("personal")}
                      className={`justify-center h-12 ${
                        projectType === "personal" 
                          ? "bg-gradient-to-r from-amber-200 to-yellow-400 text-black font-medium" 
                          : "border border-amber-200/30 text-amber-200 bg-transparent hover:bg-amber-900/20"
                      }`}
                    >
                      Personal
                    </Button>
                    <Button
                      type="button"
                      onClick={() => setProjectType("business")}
                      className={`justify-center h-12 ${
                        projectType === "business" 
                          ? "bg-gradient-to-r from-amber-200 to-yellow-400 text-black font-medium" 
                          : "border border-amber-200/30 text-amber-200 bg-transparent hover:bg-amber-900/20"
                      }`}
                    >
                      Business
                    </Button>
                  </div>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="description" className="text-amber-100 text-base">Description</Label>
                  <Textarea 
                    id="description" 
                    placeholder="Describe your project, target audience, and goals..." 
                    rows={5}
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    className="bg-black/40 border-amber-200/20 focus:border-amber-200/50 resize-none text-white placeholder:text-gray-500"
                  />
                </div>
                
                {error && (
                  <div className="text-red-400 text-sm bg-red-900/20 p-3 rounded-lg border border-red-800/50">
                    {error}
                  </div>
                )}
              </CardContent>
              <CardFooter className="flex justify-end border-t border-amber-200/10 pt-6">
                <Button 
                  onClick={handleGenerate} 
                  disabled={loading}
                  className="bg-gradient-to-r from-amber-200 to-yellow-400 hover:from-amber-300 hover:to-yellow-500 text-black font-medium px-8 py-2 rounded-full flex items-center"
                >
                  {loading ? (
                    <Loader size="sm" className="mr-2" />
                  ) : (
                    <Wand2 className="mr-2 w-5 h-5" />
                  )}
                  <span>{loading ? "Generating..." : "Generate with Llama 4"}</span>
                </Button>
              </CardFooter>
            </CardGlass>
          </div>
          
          {generatedContent && (
            <div className="relative">
              <div className="absolute -inset-1 bg-gradient-to-r from-amber-200/5 via-yellow-300/5 to-amber-200/5 blur-lg rounded-3xl"></div>
              <CardGlass className="border border-amber-200/20 backdrop-blur-md rounded-3xl overflow-hidden">
                <CardHeader className="border-b border-amber-200/10 pb-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <CardTitle className="text-2xl text-amber-100">Generated Brand Story</CardTitle>
                      <CardDescription className="text-gray-400">Powered by Llama 4 via Groq</CardDescription>
                    </div>
                    <div className="flex items-center space-x-2 bg-amber-900/20 px-4 py-2 rounded-full border border-amber-200/20">
                      <Sparkles className="w-5 h-5 text-amber-200" />
                      <span className="text-amber-100 text-sm font-medium">AI Generated</span>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="py-6">
                  <div className="whitespace-pre-wrap bg-black/40 p-6 rounded-xl border border-amber-200/10 text-gray-300 leading-relaxed">
                    {generatedContent}
                  </div>
                </CardContent>
                <CardFooter className="flex justify-between border-t border-amber-200/10 pt-6">
                  <Button 
                    variant="outline" 
                    onClick={handleGenerate} 
                    disabled={loading}
                    className="border-amber-200/30 hover:border-amber-200/60 text-amber-200 hover:bg-amber-900/20 px-6 py-2"
                  >
                    Regenerate
                  </Button>
                  <Button 
                    className="bg-gradient-to-r from-amber-200 to-yellow-400 hover:from-amber-300 hover:to-yellow-500 text-black font-medium px-6 py-2"
                  >
                    Save Story
                  </Button>
                </CardFooter>
              </CardGlass>
            </div>
          )}
        </div>
      </Container>
    </main>
  );
} 